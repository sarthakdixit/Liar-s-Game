{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar GameScreen = function GameScreen(_ref) {\n  var id = _ref.id;\n\n  var _useState = useState({\n    diceValue: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameData = _useState2[0],\n      setGameData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  useEffect(function () {\n    console.log(gameData);\n  }, [gameData]);\n  useEffect(function () {\n    setDiceValue();\n    setLoading(false);\n  }, []);\n\n  var setDiceValue = function setDiceValue() {\n    var arr = [];\n\n    while (arr.length != 5) {\n      var randomNumber = getRandomInt(1, 6);\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == randomNumber) {\n          break;\n        } else {\n          arr[i] = randomNumber;\n        }\n      }\n    }\n\n    setGameData(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        diceValue: arr\n      });\n    });\n  };\n\n  var getRandomInt = function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: id\n    })\n  });\n};\n\nexport default GameScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/media/sarthak/Personal/@Projects/Liar's Game/liars-game/pages/GameScreen.js"],"names":["React","useEffect","useState","GameScreen","id","diceValue","gameData","setGameData","loading","setLoading","console","log","setDiceValue","arr","length","randomNumber","getRandomInt","i","prev","min","max","Math","ceil","floor","random","styles","StyleSheet","create"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAU;AAAA,MAARC,EAAQ,QAARA,EAAQ;;AAC3B,kBAAgCF,QAAQ,CAAC;AACvCG,IAAAA,SAAS,EAAC;AAD6B,GAAD,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAGA,mBAA8BL,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,YAAY;AACZH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,MAAMG,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIC,GAAG,GAAG,EAAV;;AACA,WAAMA,GAAG,CAACC,MAAJ,IAAc,CAApB,EAAsB;AACpB,UAAIC,YAAY,GAAGC,YAAY,CAAC,CAAD,EAAI,CAAJ,CAA/B;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACJ,GAAG,CAACC,MAAlB,EAAyBG,CAAC,EAA1B,EAA6B;AAC3B,YAAGJ,GAAG,CAACI,CAAD,CAAH,IAAUF,YAAb,EAA0B;AACxB;AACD,SAFD,MAEK;AACHF,UAAAA,GAAG,CAACI,CAAD,CAAH,GAASF,YAAT;AACD;AACF;AACF;;AACDR,IAAAA,WAAW,CAAC,UAAAW,IAAI,EAAI;AAClB,6CACKA,IADL;AAEEb,QAAAA,SAAS,EAACQ;AAFZ;AAID,KALU,CAAX;AAMD,GAlBD;;AAoBA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACG,GAAD,EAAMC,GAAN,EAAc;AACjCD,IAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,IAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,WAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAP;AACD,GAJD;;AAMA,SACE,KAAC,IAAD;AAAA,cACE,KAAC,IAAD;AAAA,gBAAOf;AAAP;AADF,IADF;AAKD,CA9CD;;AAgDA,eAAeD,UAAf;AAEA,IAAMsB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import { StyleSheet, Text, View } from 'react-native'\nimport React, { useEffect, useState } from 'react'\n\nconst GameScreen = ({id}) => {\n  const [gameData, setGameData] = useState({\n    diceValue:[]\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    console.log(gameData)\n  }, [gameData])\n\n  useEffect(() => {\n    setDiceValue();\n    setLoading(false);\n  }, [])\n\n  const setDiceValue = () => {\n    let arr = [];\n    while(arr.length != 5){\n      let randomNumber = getRandomInt(1, 6);\n      for(let i=0;i<arr.length;i++){\n        if(arr[i] == randomNumber){\n          break;\n        }else{\n          arr[i] = randomNumber;\n        }\n      }\n    }\n    setGameData(prev => {\n      return {\n        ...prev,\n        diceValue:arr\n      }\n    });\n  }\n\n  const getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  return (\n    <View>\n      <Text>{id}</Text>\n    </View>\n  )\n}\n\nexport default GameScreen\n\nconst styles = StyleSheet.create({})"]},"metadata":{},"sourceType":"module"}